<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dtbook PUBLIC "-//NISO//DTD dtbook 2005-3//EN" "http://www.daisy.org/z3986/2005/dtbook-2005-3.dtd">
<dtbook xmlns="http://www.daisy.org/z3986/2005/dtbook/" version="2005-3" xml:lang="eng">
  <head>
    <meta name="dtb:uid" content="urn:isbn:9781449308148" />
    <meta name="dc:Identifier" content="urn:isbn:9781449308148" />
    <meta name="dc:Title" content="What Is HTML5?" />
    <meta name="dc:Creator" content="Brett Mclaughlin" />
    <meta name="dc:Description" content="In this post, we take a deeper look at HTML5 and offer a simple proposition with a lot of complex consequences: HTML5 is both something entirely new, and yet nothing more than HTML was ever intended to be; and that once you really understand HTML5, you'll change the way you code and even think about the web and your own web applications." />
    <meta name="dc:Publisher" content="Bookshare" />
    <meta name="dc:Date" content="2011-07-13" />
    <meta name="dc:Format" content="ANSI/NISO Z39.86-2005" />
    <meta name="dc:Language" content="en" />
    <meta name="dc:Rights" content="Copyright © 2011 O'Reilly Media, Inc." />
  </head>
  <book xml:space="preserve"><frontmatter id="frontmatter_000001"><doctitle id="doctitle_000001">What Is HTML5?</doctitle><docauthor id="docauthor_000001">Brett Mclaughlin</docauthor><level1 id="bks_notice"><p id="bks_notice_001" smilref="What_Is_HTML5_00001.smil#bks_notice_001">NOTICE</p></level1></frontmatter><bodymatter id="bodymatter_000001"><level1 id="cover" xml:space="preserve"><pagenum page="normal" id="pagenum_000001" smilref="What_Is_HTML5_00001.smil#pagenum_000001" />
      
    <img src="images/lrg.jpg" alt="What Is HTML5?" xml:space="preserve" id="cover-cover-image" /></level1><level1 class="book" title="What Is HTML5?" xml:space="preserve" id="index"><level2 xml:space="preserve" id="level2_000001"><h2 class="title" xml:space="preserve" id="index-what_is_html" smilref="What_Is_HTML5_00001.smil#index-what_is_html">What Is HTML5?</h2><level3 class="author" xml:space="preserve" id="level3_000001"><h3 class="author" xml:space="preserve" id="h3_000001" smilref="What_Is_HTML5_00001.smil#h3_000001">Brett McLaughlin</h3><p id="p_000001" /></level3><level3 class="editor" xml:space="preserve" id="level3_000002"><h3 xml:space="preserve" class="editor" id="h3_000002" smilref="What_Is_HTML5_00001.smil#h3_000002">Editor Mike Loukides</h3><p class="copyright" xml:space="preserve" id="p_000002" smilref="What_Is_HTML5_00001.smil#p_000002">Copyright © 2011 O'Reilly Media, Inc.</p><level4 class="legalnotice" title="Legal Notice" xml:space="preserve" id="level4_000001"><p xml:space="preserve" id="p_000003" /></level4></level3><p id="p_000004" smilref="What_Is_HTML5_00001.smil#p_000004">O'Reilly Media</p></level2></level1><level1 class="preface" title="Want to Learn More HTML5? O'Reilly Has You Covered" xml:space="preserve" id="pr01"><h1 class="title" xml:space="preserve" id="pr01-preface" smilref="What_Is_HTML5_00001.smil#pr01-preface">Want to Learn More HTML5? O'Reilly Has You Covered</h1><p xml:space="preserve" id="p_000005" smilref="What_Is_HTML5_00001.smil#p_000005">Check out these HTML5 resources, available now:</p><table border="0" summary="Simple list" class="simplelist" xml:space="preserve" id="table_000001"><tr xml:space="preserve" id="tr_000001"><td xml:space="preserve" rowspan="1" colspan="1" id="td_000001"><a class="ulink" href="http://bit.ly/html5uar" xml:space="preserve" external="true" id="a_000001" smilref="What_Is_HTML5_00001.smil#a_000001">HTML5: Up and Running</a><span class="text" id="span_000001" smilref="What_Is_HTML5_00001.smil#span_000001"> by Mark Pilgrim</span></td></tr><tr xml:space="preserve" id="tr_000002"><td xml:space="preserve" rowspan="1" colspan="1" id="td_000002"><a class="ulink" href="http://bit.ly/ormhtml5canvas" xml:space="preserve" external="true" id="a_000002" smilref="What_Is_HTML5_00001.smil#a_000002">HTML5 Canvas</a><span class="text" id="span_000002" smilref="What_Is_HTML5_00001.smil#span_000002"> by Steve Fulton and Jeff Fulton</span></td></tr><tr xml:space="preserve" id="tr_000003"><td xml:space="preserve" rowspan="1" colspan="1" id="td_000003"><a class="ulink" href="http://bit.ly/html5geolocation" xml:space="preserve" external="true" id="a_000003" smilref="What_Is_HTML5_00001.smil#a_000003">HTML5 Geolocation</a><span class="text" id="span_000003" smilref="What_Is_HTML5_00001.smil#span_000003"> by Anthony T. Holdener III</span></td></tr><tr xml:space="preserve" id="tr_000004"><td xml:space="preserve" rowspan="1" colspan="1" id="td_000004"><a class="ulink" href="http://bit.ly/html5media" xml:space="preserve" external="true" id="a_000004" smilref="What_Is_HTML5_00001.smil#a_000004">HTML5 Media</a><span class="text" id="span_000004" smilref="What_Is_HTML5_00001.smil#span_000004"> by Shelley Powers</span></td></tr></table></level1><level1 class="chapter" title="Chapter 1. What Is HTML5?" xml:space="preserve" id="ch01"><h1 class="title" xml:space="preserve" id="ch01-what_is_html5question_mark" smilref="What_Is_HTML5_00001.smil#ch01-what_is_html5question_mark">Chapter 1. What Is HTML5?</h1><p xml:space="preserve" id="p_000006" smilref="What_Is_HTML5_00001.smil#p_000006">Once you really understand HTML5, you'll change the way you think about the web.</p><level2 class="mediaobject" xml:space="preserve" id="level2_000002"><img src="images/0511-html5-logo.jpg" alt="image with no caption" xml:space="preserve" id="img_000001" /></level2><div class="itemizedlist" xml:space="preserve" id="div_000001"><list class="itemizedlist" xml:space="preserve" type="ul" id="list_000001"><li class="listitem" xml:space="preserve" id="li_000001"><p xml:space="preserve" id="p_000007" smilref="What_Is_HTML5_00001.smil#p_000007"><a class="xref" href="#ch01-return_to_first_principles" title="A return to first principles" xml:space="preserve" external="false" id="a_000005" smilref="What_Is_HTML5_00001.smil#a_000005">A return to first principles</a></p></li><li class="listitem" xml:space="preserve" id="li_000002"><p xml:space="preserve" id="p_000008" smilref="What_Is_HTML5_00001.smil#p_000008"><a class="xref" href="#ch01s02" title="HTML5: Still connecting things" xml:space="preserve" external="false" id="a_000006" smilref="What_Is_HTML5_00001.smil#a_000006">HTML5: Still connecting things</a></p></li><li class="listitem" xml:space="preserve" id="li_000003"><p xml:space="preserve" id="p_000009" smilref="What_Is_HTML5_00001.smil#p_000009"><a class="xref" href="#ch01s03" title="HTML5 connections are the new rich media" xml:space="preserve" external="false" id="a_000007" smilref="What_Is_HTML5_00001.smil#a_000007">HTML5 connections are the new rich media</a></p></li><li class="listitem" xml:space="preserve" id="li_000004"><p xml:space="preserve" id="p_000010" smilref="What_Is_HTML5_00001.smil#p_000010"><a class="xref" href="#ch01s04" title="JavaScript isn't the focus of HTML5 ... right?" xml:space="preserve" external="false" id="a_000008" smilref="What_Is_HTML5_00001.smil#a_000008">JavaScript isn't the focus of HTML5 ... right?</a></p></li><li class="listitem" xml:space="preserve" id="li_000005"><p xml:space="preserve" id="p_000011" smilref="What_Is_HTML5_00001.smil#p_000011"><a class="xref" href="#ch01s05" title="Container-based web pages: A step (sort of) in the right direction" xml:space="preserve" external="false" id="a_000009" smilref="What_Is_HTML5_00001.smil#a_000009">Container-based web pages: A step (sort of) in the right direction</a></p></li><li class="listitem" xml:space="preserve" id="li_000006"><p xml:space="preserve" id="p_000012" smilref="What_Is_HTML5_00001.smil#p_000012"><a class="xref" href="#ch01s06" title="The canvas element is a programmable div" xml:space="preserve" external="false" id="a_000010" smilref="What_Is_HTML5_00001.smil#a_000010">The canvas element is a programmable div</a></p></li><li class="listitem" xml:space="preserve" id="li_000007"><p xml:space="preserve" id="p_000013" smilref="What_Is_HTML5_00001.smil#p_000013"><a class="xref" href="#ch01s07" title="Mobile: Killer application, ho-hum client" xml:space="preserve" external="false" id="a_000011" smilref="What_Is_HTML5_00001.smil#a_000011">Mobile: Killer application, ho-hum client</a></p></li><li class="listitem" xml:space="preserve" id="li_000008"><p xml:space="preserve" id="p_000014" smilref="What_Is_HTML5_00001.smil#p_000014"><a class="xref" href="#ch01s08" title="... and a partridge and a pear tree" xml:space="preserve" external="false" id="a_000012" smilref="What_Is_HTML5_00001.smil#a_000012">... and a partridge and a pear tree</a></p></li></list></div><p xml:space="preserve" id="p_000015" smilref="What_Is_HTML5_00001.smil#p_000015"><span class="text" id="span_000005">HTML5: Everyone's using it, nobody knows what it is. I realize that sounds more like a line out of an existential movie -- maybe </span><span class="emphasis" xml:space="preserve" id="span_000006"><em xml:space="preserve" id="em_000001">Waiting for Godot</em></span><span class="text" id="span_000007"> or a screenplay by Sartre -- than a statement about HTML5. But it's really the truth: most of the people using HTML5 are treating it as HTML4+, or even worse, HTML4 (and some stuff they don't use). The result? A real delay in the paradigm shift that HTML5 is almost certain to bring. It's certainly not time to look away, because by the time you look back, you may have missed something really important: a subtle but important transition centered around HTML5.</span></p><p xml:space="preserve" id="p_000016" smilref="What_Is_HTML5_00001.smil#p_000016">In this post, I want to take a deeper look at HTML5. I have a simple proposition with a lot of complex consequences: HTML5 is both something entirely new, and yet nothing more than HTML was ever intended to be; and that once you really understand HTML5, you'll change the way you code and even think about the web and your own web applications.</p><level2 class="sect1" title="A return to first principles" xml:space="preserve" id="level2_000003"><h2 class="title" xml:space="preserve" id="ch01-return_to_first_principles" smilref="What_Is_HTML5_00001.smil#ch01-return_to_first_principles">A return to first principles</h2><p xml:space="preserve" id="p_000017" smilref="What_Is_HTML5_00001.smil#p_000017"><span class="text" id="span_000008">HTML has always been about interconnection. Back in the ancient days, when electronica was cool and </span><span class="emphasis" xml:space="preserve" id="span_000009"><em xml:space="preserve" id="em_000002">not</em></span><span class="text" id="span_000010"> called "house music" and before the Rolling Stones qualified for Medicare, the web was littered with big huge documents. In fact, it was exactly the opposite of today, where most people think enhanced digital books are just electronic wrappers around full-text copies of what's in print.</span></p><p xml:space="preserve" id="p_000018" smilref="What_Is_HTML5_00001.smil#p_000018">In the '90s, the web was full of 15-page specifications, all in a single file. You scrolled through those massive documents just like you paged through an encyclopedia. Much of the early versions of HTML were intended to deal with this, widely considered a detriment to the readability and usability of the web. That's largely because Tim Berners-Lee, the recognized father of HTML, was a researcher enabling other researchers (mostly at CERN at the time). If you've ever known anyone mired in research, brevity is rarely their prevailing trait, so reading huge documents online was a necessity, but scrolling through 15- (or 1,500-) page documents just wasn't a long-term option. </p><p xml:space="preserve" id="p_000019" smilref="What_Is_HTML5_00001.smil#p_000019"><span class="text" id="span_000011" smilref="What_Is_HTML5_00001.smil#span_000011">So early on, HTML was not primarily about displaying those documents with lots of
        formatting. Most fundamental to HTML was the simple </span><code class="literal" xml:space="preserve" id="code_000001" smilref="What_Is_HTML5_00001.smil#code_000001">a</code><span class="text" id="span_000012" smilref="What_Is_HTML5_00001.smil#span_000012"> tag. It gave a
        document the means to link to another document. Suddenly 15-page documents were reduced
        (mercifully) to 15 one-page documents, all linked together. Bye bye scrolling; hello useful
        linking. This is all pretty standard fare, and if much of this is new to you, then the
        waters are going to get deep quickly. </span></p></level2></level1><level1 class="sect1" title="HTML5: Still connecting things" xml:space="preserve" id="ch01s02"><h1 class="title" xml:space="preserve" id="ch01s02-html5colon_still_connecting_things" smilref="What_Is_HTML5_00001.smil#ch01s02-html5colon_still_connecting_things">HTML5: Still connecting things</h1><p xml:space="preserve" id="p_000020" smilref="What_Is_HTML5_00001.smil#p_000020"><span class="text" id="span_000013" smilref="What_Is_HTML5_00001.smil#span_000013">Fast forward to the present. Ultimately, this ability to connect things on the Internet
        is still the primary feature of HTML5. It's just that now, we're starting to
        realize the original vision of HTML, and connect a lot more than hypertext with static
        images. So the introduction of the </span><code class="literal" xml:space="preserve" id="code_000002" smilref="What_Is_HTML5_00001.smil#code_000002">audio</code><span class="text" id="span_000014" smilref="What_Is_HTML5_00001.smil#span_000014"> and </span><code class="literal" xml:space="preserve" id="code_000003" smilref="What_Is_HTML5_00001.smil#code_000003">video</code><span class="text" id="span_000015" smilref="What_Is_HTML5_00001.smil#span_000015">
        elements in HTML5 are nothing more than logical extensions of the old </span><code class="literal" xml:space="preserve" id="code_000004" smilref="What_Is_HTML5_00001.smil#code_000004">a</code><span class="text" id="span_000016" smilref="What_Is_HTML5_00001.smil#span_000016">
        element.</span></p><p xml:space="preserve" id="p_000021" smilref="What_Is_HTML5_00001.smil#p_000021"><span class="text" id="span_000017" smilref="What_Is_HTML5_00001.smil#span_000017">(Note: in a more correct sense, </span><code class="literal" xml:space="preserve" id="code_000005" smilref="What_Is_HTML5_00001.smil#code_000005">audio</code><span class="text" id="span_000018" smilref="What_Is_HTML5_00001.smil#span_000018"> and </span><code class="literal" xml:space="preserve" id="code_000006" smilref="What_Is_HTML5_00001.smil#code_000006">video</code><span class="text" id="span_000019" smilref="What_Is_HTML5_00001.smil#span_000019">
        replace </span><code class="literal" xml:space="preserve" id="code_000007" smilref="What_Is_HTML5_00001.smil#code_000007">object</code><span class="text" id="span_000020" smilref="What_Is_HTML5_00001.smil#span_000020"> and all the embed code that people have been throwing into
        web pages for years, largely pulled from sites like YouTube or Vimeo. Still, those elements
        are semantically functioning more like an a element that drops the link into a page, rather
        than taking you off to another destination. In that sense, even the </span><code class="literal" xml:space="preserve" id="code_000008" smilref="What_Is_HTML5_00001.smil#code_000008">img</code><span class="text" id="span_000021" smilref="What_Is_HTML5_00001.smil#span_000021">
        element is in some ways nothing more than an inline </span><code class="literal" xml:space="preserve" id="code_000009" smilref="What_Is_HTML5_00001.smil#code_000009">a</code><span class="text" id="span_000022" smilref="What_Is_HTML5_00001.smil#span_000022"> element: it grabs
        content from another location and pulls that content into a page. It's all just
        linking, and that's what HTML is really about: linking and connecting things.)</span></p><p xml:space="preserve" id="p_000022" smilref="What_Is_HTML5_00001.smil#p_000022">So now you can pull in images, audio, and video directly into a document. More importantly, because those items now have first-order elements, you can easily manipulate the audio and video from JavaScript. That's a big deal, and something I'll come back to later. In a nutshell, a first-order element is always going to encourage more direct programmatic access than one in which you have to be sneaky or clever to really get at it.</p><p xml:space="preserve" id="p_000023" smilref="What_Is_HTML5_00001.smil#p_000023"><span class="text" id="span_000023" smilref="What_Is_HTML5_00001.smil#span_000023">So while the </span><code class="literal" xml:space="preserve" id="code_000010" smilref="What_Is_HTML5_00001.smil#code_000010">audio</code><span class="text" id="span_000024" smilref="What_Is_HTML5_00001.smil#span_000024"> and </span><code class="literal" xml:space="preserve" id="code_000011" smilref="What_Is_HTML5_00001.smil#code_000011">video</code><span class="text" id="span_000025" smilref="What_Is_HTML5_00001.smil#span_000025"> elements are new,
        their purpose isn't. HTML5 allows you to integrate more assets into a single document,
        all while keeping the integrity and separation of those assets into place. This is nothing
        more than making sure that the bibliography of a document isn't physically stuck at
        the end of a long web page, but is in fact separate and easily maintained, but still able to
        be integrated into the rest of the page.</span></p><p xml:space="preserve" id="p_000024" smilref="What_Is_HTML5_00001.smil#p_000024">Now, before moving on, you need to immediately see that it's not (relatively) important that you can grab audio and video and drop it into an HTML page. What is important is that you can more easily grab "other stuff" and drop it into a page. There may eventually be 20 or 25 elements for things well beyond "audio" and "video," and the fundamental premise is still the same: the important thing here is that multiple pieces in multiple places can all be wired together in a meaningful way, with semantic elements describing that "stuff" easily accessible by JavaScript. The fact that, in HTML5, that "other stuff" happens to be audio and video is cool, but rather incidental.</p></level1><level1 class="sect1" title="HTML5 connections are the new rich media" xml:space="preserve" id="ch01s03"><h1 class="title" xml:space="preserve" id="ch01s03-html5_connections_are_the_new_rich_media" smilref="What_Is_HTML5_00001.smil#ch01s03-html5_connections_are_the_new_rich_media">HTML5 connections are the new rich media</h1><p xml:space="preserve" id="p_000025" smilref="What_Is_HTML5_00001.smil#p_000025">So what, then? Why is this such a big deal? Well, largely for three reasons:</p><div class="orderedlist" xml:space="preserve" id="div_000002"><list class="orderedlist" xml:space="preserve" type="ol" id="list_000002"><li class="listitem" xml:space="preserve" id="li_000009"><p xml:space="preserve" id="p_000026" smilref="What_Is_HTML5_00001.smil#p_000026"><span class="strong" xml:space="preserve" id="span_000026"><strong xml:space="preserve" id="strong_000001">Web pages no longer need to look (and act) like web pages.</strong></span><span class="text" id="span_000027"> The rise of Flash over the last years has largely been an attempt to overcome "limitations" of what HTML allows. Flash was initially often focused on animations and cool visual effects. But then entire sites got rolled into Flash, allowing for different types of navigation and page organization, richer programmatic access to the individual pieces of a web page, and the ability to avoid the quirkiness of JavaScript. (I'll leave out the obligatory comment here on the quirkiness of the Flash stack.)</span></p></li><li class="listitem" xml:space="preserve" id="li_000010"><p xml:space="preserve" id="p_000027" smilref="What_Is_HTML5_00001.smil#p_000027"><span class="strong" xml:space="preserve" id="span_000028"><strong xml:space="preserve" id="strong_000002">Web pages no longer need to represent one person/organization's content.</strong></span><span class="text" id="span_000029"> Even though web programmers and designers have been pulling in images from other sites for years, web pages are still largely homogenous in terms of the asset ownership. A web page today really has one person's content, images, pages, media, and the like. Even sites like Vimeo and YouTube are more often used as extensions of a private repository than an actual free medium for world access.</span></p></li><li class="listitem" xml:space="preserve" id="li_000011"><p xml:space="preserve" id="p_000028" smilref="What_Is_HTML5_00001.smil#p_000028"><span class="strong" xml:space="preserve" id="span_000030"><strong xml:space="preserve" id="strong_000003">Web pages can function intelligently and easily across display devices.</strong></span><span class="text" id="span_000031"> It's no secret that MOBILE (as one co-worker recently email-shouted at me) is the banner under which HTML5 most often flies. But the story really isn't that HTML5 has great mobile support; rather, it's that mobile is no longer a problem child. In other words, the story is that what works on a desktop browser pretty much works on a phone. (The list of things not covered by "pretty much" is shrinking every few weeks, so better to not list them here and appear outdated next month.) Put another way, phones and tablets are first-class citizens, because they are privy to the same interconnections listed above. In fact, it's probably not too meta-physical to say that in addition to inter-connecting content, HTML5 has a really good shot at interconnecting all the devices floating around ... and that's arguably at least as big a deal as what it does for content and web applications.</span></p></li></list></div><p xml:space="preserve" id="p_000029" smilref="What_Is_HTML5_00001.smil#p_000029">HTML5 introduces -- although it's not at all complete in its support for -- a paradigm that moves away from both of these limitations. First, HTML5 and CSS3 provide for JavaScript a pretty solid working set of tools and effects, comparable to most Flash websites. I can generally take a medium-sized Flash website and recreate it in WordPress, HTML5, JavaScript (via jQuery), and CSS3 in a week, if not less. And the upside is enormous: text is again selectable, bookmarking works without lots of weird tricks, and of course website owners can actually update their own sites, rather than relying on some overly busy Flash programmer to help. </p><p xml:space="preserve" id="p_000030" smilref="What_Is_HTML5_00001.smil#p_000030"><span class="text" id="span_000032" smilref="What_Is_HTML5_00001.smil#span_000032">The result is that HTML5 is again the most usable and indexable tool available for web
        content; but that content is richer than ever before. Further, that content no longer has to
        be owned to the degree that older web pages had to be owned. For a lot of emotional and
        psychological reasons, mainly, the </span><code class="literal" xml:space="preserve" id="code_000012" smilref="What_Is_HTML5_00001.smil#code_000012">audio</code><span class="text" id="span_000033" smilref="What_Is_HTML5_00001.smil#span_000033"> and </span><code class="literal" xml:space="preserve" id="code_000013" smilref="What_Is_HTML5_00001.smil#code_000013">video</code><span class="text" id="span_000034" smilref="What_Is_HTML5_00001.smil#span_000034">
        elements suggest pulling assets from other sources more than the more generic
          </span><code class="literal" xml:space="preserve" id="code_000014" smilref="What_Is_HTML5_00001.smil#code_000014">object</code><span class="text" id="span_000035" smilref="What_Is_HTML5_00001.smil#span_000035"> element does. There's something about seeing
          </span><code class="literal" xml:space="preserve" id="code_000015" smilref="What_Is_HTML5_00001.smil#code_000015">video</code><span class="text" id="span_000036" smilref="What_Is_HTML5_00001.smil#span_000036"> that screams, "Grab some video and stick it in your
        page!" But since there will always be at least an order of magnitude greater number of
        web page creators than video makers, how do you get that video? You grab it from someone
        else, hopefully someone who's used a nice Creative Commons license. The same is true
        for </span><code class="literal" xml:space="preserve" id="code_000016" smilref="What_Is_HTML5_00001.smil#code_000016">audio</code><span class="text" id="span_000037" smilref="What_Is_HTML5_00001.smil#span_000037">, of course: you can connect to someone else's audio
        incredibly easily, and so you should. And as already intimated, the audio and video that
        plays on your desktop browser also plays pretty well on an HTML5-enabled phone or
        tablet.</span></p><p xml:space="preserve" id="p_000031" smilref="What_Is_HTML5_00001.smil#p_000031"><span class="text" id="span_000038" smilref="What_Is_HTML5_00001.smil#span_000038">Underneath these limitation-stripping observations is something much bigger: content
        creators are moving from creating completely original content to amalgamating and assembling
        content. Sure, this isn't anything technically new, but it is something that's
        happening more due to the introduction of HTML5 elements like </span><code class="literal" xml:space="preserve" id="code_000017" smilref="What_Is_HTML5_00001.smil#code_000017">audio</code><span class="text" id="span_000039" smilref="What_Is_HTML5_00001.smil#span_000039"> and
          </span><code class="literal" xml:space="preserve" id="code_000018" smilref="What_Is_HTML5_00001.smil#code_000018">video</code><span class="text" id="span_000040" smilref="What_Is_HTML5_00001.smil#span_000040">. And when the web starts to grow in its interconnectedness, it
        takes a giant step toward the world of Neal Stephenson and "</span><a class="ulink" href="http://en.wikipedia.org/wiki/Snow_Crash" xml:space="preserve" external="true" id="a_000013" smilref="What_Is_HTML5_00001.smil#a_000013">Snow Crash</a><span class="text" id="span_000041" smilref="What_Is_HTML5_00001.smil#span_000041">" and "</span><a class="ulink" href="http://en.wikipedia.org/wiki/Neuromancer" xml:space="preserve" external="true" id="a_000014" smilref="What_Is_HTML5_00001.smil#a_000014">Neuromancer</a><span class="text" id="span_000042" smilref="What_Is_HTML5_00001.smil#span_000042">," doesn't
        it? One person creates a video and doesn't have to place it or build out a web page.
        They just throw it on a content-sharing medium like YouTube or Vimeo. Another person goes
        beyond a simple off-page link but actually integrates that video (fully accessible and
        mutable via JavaScript, something we'll get to shortly) into a web page. Neither
        person has to be an expert outside of their own domain (video and web page, respectively),
        but the result is a fusion of assets.</span></p><p xml:space="preserve" id="p_000032" smilref="What_Is_HTML5_00001.smil#p_000032"><span class="text" id="span_000043" smilref="What_Is_HTML5_00001.smil#span_000043">Now expand the working set of that fusion by a factor of 1,000. Or 1,000,000. Throw in
          </span><a class="ulink" href="http://radar.oreilly.com/2010/06/what-is-data-science.html" xml:space="preserve" external="true" id="a_000015" smilref="What_Is_HTML5_00001.smil#a_000015">data science</a><span class="text" id="span_000044" smilref="What_Is_HTML5_00001.smil#span_000044"> and the ability to find, organize, and even localize data like never
        before. Access that data not just from one browser, but all the major browsers, on all the
        major devices -- laptops, netbooks, tablets, and phones. Toss in unbelievably cheap
        data storage, and then realize that we've yet to mention the increased power of
        JavaScript, the </span><code class="literal" xml:space="preserve" id="code_000019" smilref="What_Is_HTML5_00001.smil#code_000019">canvas</code><span class="text" id="span_000045" smilref="What_Is_HTML5_00001.smil#span_000045"> tag and its ability to further manipulate the
        referenced audio and video, and web messaging, and you'll quickly forget that
          </span><span class="emphasis" xml:space="preserve" id="span_000046" smilref="What_Is_HTML5_00001.smil#span_000046"><em xml:space="preserve" id="em_000003">we're talking about HTML here, not a traditional high-end programming language like Java or PHP!</em></span></p></level1><level1 class="sect1" title="JavaScript isn't the focus of HTML5 ... right?" xml:space="preserve" id="ch01s04"><h1 class="title" xml:space="preserve" id="ch01s04-javascript_isnapostrophet_the_focus_of_h" smilref="What_Is_HTML5_00001.smil#ch01s04-javascript_isnapostrophet_the_focus_of_h">JavaScript isn't the focus of HTML5 ... right?</h1><p xml:space="preserve" id="p_000033" smilref="What_Is_HTML5_00001.smil#p_000033"><span class="text" id="span_000047" smilref="What_Is_HTML5_00001.smil#span_000047">That greater ability of HTML5 pages to do a lot more brings JavaScript into focus. Honestly, there's not much in HTML5 that specifically speaks to JavaScript. Yes, the HTML5 draft, </span><a class="ulink" href="http://www.w3.org/TR/2011/WD-html5-diff-20110405/" xml:space="preserve" external="true" id="a_000016" smilref="What_Is_HTML5_00001.smil#a_000016">according to the W3C</a><span class="text" id="span_000048" smilref="What_Is_HTML5_00001.smil#span_000048">, is intended to replace the JavaScript APIs detailed in older HTML4, XML1, and DOM Level 2 documents. But no, don't expect the JavaScript language to be radically, or even that noticeably, changed in HTML5. Yet hang around the web programming water cooler, and you'll hear more about JavaScript than ever before. So what gives?</span></p><p xml:space="preserve" id="p_000034" smilref="What_Is_HTML5_00001.smil#p_000034"><span class="text" id="span_000049" smilref="What_Is_HTML5_00001.smil#span_000049">Well, first of all, HTML5 adds several important new first-order elements, as already
        mentioned. </span><code class="literal" xml:space="preserve" id="code_000020" smilref="What_Is_HTML5_00001.smil#code_000020">audio</code><span class="text" id="span_000050" smilref="What_Is_HTML5_00001.smil#span_000050"> and </span><code class="literal" xml:space="preserve" id="code_000021" smilref="What_Is_HTML5_00001.smil#code_000021">video</code><span class="text" id="span_000051" smilref="What_Is_HTML5_00001.smil#span_000051"> are key, as is another
        element we'll get to, </span><code class="literal" xml:space="preserve" id="code_000022" smilref="What_Is_HTML5_00001.smil#code_000022">canvas</code><span class="text" id="span_000052" smilref="What_Is_HTML5_00001.smil#span_000052">. That means that it no longer takes a
        lot of </span><code class="literal" xml:space="preserve" id="code_000023" smilref="What_Is_HTML5_00001.smil#code_000023">document.getElementsByTagName("object")</code><span class="text" id="span_000053" smilref="What_Is_HTML5_00001.smil#span_000053"> or ID-tagging of
          </span><code class="literal" xml:space="preserve" id="code_000024" smilref="What_Is_HTML5_00001.smil#code_000024">object</code><span class="text" id="span_000054" smilref="What_Is_HTML5_00001.smil#span_000054"> elements to work with media in a web page. Extending that, these
        elements (unlike the </span><code class="literal" xml:space="preserve" id="code_000025" smilref="What_Is_HTML5_00001.smil#code_000025">object</code><span class="text" id="span_000055" smilref="What_Is_HTML5_00001.smil#span_000055"> element) have media-specific attributes like
          </span><code class="literal" xml:space="preserve" id="code_000026" smilref="What_Is_HTML5_00001.smil#code_000026">autoplay</code><span class="text" id="span_000056" smilref="What_Is_HTML5_00001.smil#span_000056"> and </span><code class="literal" xml:space="preserve" id="code_000027" smilref="What_Is_HTML5_00001.smil#code_000027">preload</code><span class="text" id="span_000057" smilref="What_Is_HTML5_00001.smil#span_000057">. This means that with
        JavaScript, you can grab a video, display its controls, change the URL and effectively load
        a new video, and even control when the video loads (or preloads) and mute and unmute the
        audio.</span></p><p xml:space="preserve" id="p_000035" smilref="What_Is_HTML5_00001.smil#p_000035"><span class="text" id="span_000058" smilref="What_Is_HTML5_00001.smil#span_000058">All of this is done via JavaScript, but there's nothing new
          </span><span class="emphasis" xml:space="preserve" id="span_000059" smilref="What_Is_HTML5_00001.smil#span_000059"><em xml:space="preserve" id="em_000004">in</em></span><span class="text" id="span_000060" smilref="What_Is_HTML5_00001.smil#span_000060"> JavaScript enabling this access. It's the addition of
        semantically meaningful elements in HTML5 that makes JavaScript more powerful, or at the
        least an easier medium in which to accomplish these tasks. Sure, a clever JavaScript
        programmer (who was comfortable tokenizing and parsing) could get most of this from grabbing
        particular attributes from an </span><code class="literal" xml:space="preserve" id="code_000028" smilref="What_Is_HTML5_00001.smil#code_000028">object</code><span class="text" id="span_000061" smilref="What_Is_HTML5_00001.smil#span_000061"> element, adjust them, reset them,
        and so on. But my goodness, it was a mess, it was player-specific, and mostly made for
        annoying late nights trying to get the semicolon in just the right place.</span></p><p xml:space="preserve" id="p_000036" smilref="What_Is_HTML5_00001.smil#p_000036"><span class="text" id="span_000062" smilref="What_Is_HTML5_00001.smil#span_000062">In fact, much of what's great, albeit seemingly boring, about HTML5 is the move of
        important elements and attributes from customized or one-off items to semantically important
        ones. Even the </span><code class="literal" xml:space="preserve" id="code_000029" smilref="What_Is_HTML5_00001.smil#code_000029">draggable</code><span class="text" id="span_000063" smilref="What_Is_HTML5_00001.smil#span_000063"> attribute -- allowing native drag-and-drop
        in HTML5 -- is cooler because it's now accessible and easily mutated via
        JavaScript. A page requires less textual data to mean something, and more of that meaning is
        pushed into the structure of the page itself.</span></p><p xml:space="preserve" id="p_000037" smilref="What_Is_HTML5_00001.smil#p_000037"><span class="text" id="span_000064" smilref="What_Is_HTML5_00001.smil#span_000064">I think it's fair to go as far as being axiomatic here: the more a document has
        semantic meaning, and the less attributes or even elements are nested as plain text within
        hidden </span><code class="literal" xml:space="preserve" id="code_000030" smilref="What_Is_HTML5_00001.smil#code_000030">input</code><span class="text" id="span_000065" smilref="What_Is_HTML5_00001.smil#span_000065"> elements or </span><code class="literal" xml:space="preserve" id="code_000031" smilref="What_Is_HTML5_00001.smil#code_000031">object</code><span class="text" id="span_000066" smilref="What_Is_HTML5_00001.smil#span_000066"> embeds, the better
        that document will be. The page becomes easier to access, update, and make responsive from a
        JavaScript point of view; CSS (whether it's CSS2 or CSS3) can be applied directly
        without so many messy pseudo- and nested selectors; and the document describes itself. And
        when you have documents that have semantic meaning, you're going to find that your
        JavaScript is clearer. In fact, many mid-level programmers will realize that they can do
        things that the "advanced" programmers can: throw a video into the page based on
        a click, autoplay that video, mute the audio and load a different piece of audio, play that
        different audio over the video, and boom: you've got an all-HTML5 discussion </span><a class="ulink" href="http://www.youtube.com/watch?v=j9i9N-Ez5Y8" xml:space="preserve" external="true" id="a_000017" smilref="What_Is_HTML5_00001.smil#a_000017">by Hitler about JJ Abrams and Star Trek ...</a><span class="text" id="span_000067" smilref="What_Is_HTML5_00001.smil#span_000067"> without having to modify the original audio and video assets.</span></p><p xml:space="preserve" id="p_000038" smilref="What_Is_HTML5_00001.smil#p_000038">Put another way, the HTML page becomes more of a container (which contains other containers, which contain other containers ... and so on) than a page. JavaScript can easily access those nested containers, and modify them, update them, move them around, and do anything else you can dream up and code. CSS can also visually style and work with those containers, further making the HTML a purely organizational tool, and even that becomes loose. With absolute positioning, the order and position of elements within the HTML organization becomes at best a guide, if not totally irrelevant.</p><p xml:space="preserve" id="p_000039" smilref="What_Is_HTML5_00001.smil#p_000039">(It's worth saying a display approach that completely ignores the organization and sequence of elements within an HTML document is a pretty bad idea. What you gain with new semantically valuable elements is quickly lost when you start absolutely positioning everything, and removing any sense of hierarchy. Of course, that's true in HTML4 and XHTML1 as well as HTML5, so it's not something I'll focus on beyond this rather quick note.)</p></level1><level1 class="sect1" title="Container-based web pages: A step (sort of) in the right direction" xml:space="preserve" id="ch01s05"><h1 class="title" xml:space="preserve" id="ch01s05-container-based_web_pagescolon_a_step_le" smilref="What_Is_HTML5_00001.smil#ch01s05-container-based_web_pagescolon_a_step_le">Container-based web pages: A step (sort of) in the right direction</h1><p xml:space="preserve" id="p_000040" smilref="What_Is_HTML5_00001.smil#p_000040">The idea of an HTML page being little more than an organization of malleable elements is nothing new, but HTML5 seems to be a clear jumping-in point for JavaScript programmers and web developers that haven't yet made that conceptual leap. It's notable that with the rise of CMSes like WordPress for smaller businesses and personal websites, almost everyone is now familiar with the separation of concerns involved when even the text of an HTML page isn't necessarily encoded and stored within a static HTML file. This is all a good thing, too. As a JavaScript programmer myself, I'd rather have more programmatic control and create a page that is built based on user decisions, database-driven logic, and programming over one person with an HTML or text editor.</p><p xml:space="preserve" id="p_000041" smilref="What_Is_HTML5_00001.smil#p_000041"><span class="text" id="span_000068" smilref="What_Is_HTML5_00001.smil#span_000068">In fact, the most obvious example of this approach is the </span><a class="ulink" href="http://www.twitter.com" xml:space="preserve" external="true" id="a_000018" smilref="What_Is_HTML5_00001.smil#a_000018">Twitter</a><span class="text" id="span_000069" smilref="What_Is_HTML5_00001.smil#span_000069"> website. For example, when I visit Twitter, I see a ton of content:</span></p><level2 class="mediaobject" xml:space="preserve" id="level2_000004"><img src="images/twitterscreengrab.png.jpg" alt="image with no caption" xml:space="preserve" id="img_000002" /></level2><p xml:space="preserve" id="p_000042" smilref="What_Is_HTML5_00001.smil#p_000042">But if you take a closer look, by viewing the source, you'll find hundreds of lines of JavaScript at the beginning of the file, a ton more JavaScript at the end of the file, and this rather pedestrian bit of HTML squeezed into the middle. Here's about 1/3 of that HTML, which is pretty brief:</p><p id="p_000043" smilref="What_Is_HTML5_00001.smil#p_000043"><code xml:space="preserve" class="preserve-whitespace" id="code_000032" smilref="What_Is_HTML5_00001.smil#code_000032">&lt;![CDATA[
  &lt;body class="user-style-twttr  loading-body "&gt;
    &lt;div id="doc"&gt;
      &lt;div id="top-stuff"&gt;
        &lt;div id="banners" style="clear:both;"&gt;&lt;/div&gt;
        &lt;div id="top-bar-outer"&gt;
          &lt;div id="top-bar-bg"&gt;&lt;/div&gt;
          &lt;div id="top-bar"&gt;
            &lt;div class="top-bar-inside"&gt;
              &lt;div class="static-links"&gt;
  &lt;div id="logo"&gt;
    &lt;a href="/"&gt;Twitter&lt;/a&gt;
  &lt;/div&gt;
  &lt;form id="search-form" action="/search" method="GET"&gt;
    &lt;span class="glass"&gt;&lt;em&gt;&lt;/em&gt;&lt;/span&gt;
    &lt;input value="" placeholder="Search" name="q" id="search-query" type="text" /&gt;
  &lt;/form&gt;
  &lt;div id="global-nav"&gt;
    &lt;ul&gt;
      &lt;li id="global-nav-home"&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
          &lt;li id="global-nav-profile"&gt;&lt;a href="/bdmclaughlin"&gt;Profile&lt;/a&gt;&lt;/li&gt;
          &lt;li id="global-nav-messages"&gt;&lt;a href="/messages"&gt;Messages&lt;/a&gt;&lt;/li&gt;
          &lt;li id="global-nav-whotofollow"&gt;&lt;a href="/#!/who_to_follow"&gt;Who To Follow&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="sections"&gt;&lt;/div&gt;]]&gt;</code></p><p xml:space="preserve" id="p_000044" smilref="What_Is_HTML5_00001.smil#p_000044">Not a lot to it, is there? Of course, even parts of this have been inserted programmatically, like links to my personal profile and messages. And even though this is an HTML4 site, it points to some important things with which HTML5 is attempting to deal.</p><p xml:space="preserve" id="p_000045" smilref="What_Is_HTML5_00001.smil#p_000045"><span class="text" id="span_000070" smilref="What_Is_HTML5_00001.smil#span_000070">Now, what I want to argue is that while this is a generally good thing -- using
        JavaScript to connect the organization of HTML to content not encoded directly into that
        HTML -- the step forward of new HTML5 elements is matched, if not overtaken, by some
        steps back in terms of this sort of programming, at least as it's currently
        implemented. It's not exaggeration to say that many pages, like Twitter's page,
        are basically a bunch of empty </span><code class="literal" xml:space="preserve" id="code_000033" smilref="What_Is_HTML5_00001.smil#code_000033">div</code><span class="text" id="span_000071" smilref="What_Is_HTML5_00001.smil#span_000071">s with </span><code class="literal" xml:space="preserve" id="code_000034" smilref="What_Is_HTML5_00001.smil#code_000034">id</code><span class="text" id="span_000072" smilref="What_Is_HTML5_00001.smil#span_000072"> attributes
        and not much else. It's unclear whether Twitter's page will evolve into a more
        HTML5-centric approach, but unless it also evolves its structure, there are some
        problems.</span></p><p xml:space="preserve" id="p_000046" smilref="What_Is_HTML5_00001.smil#p_000046"><span class="text" id="span_000073" smilref="What_Is_HTML5_00001.smil#span_000073">Here's the thing: this approach is programmer-rich, yet semantically poor. First,
        elements aren't truly indicating content; they're just indicating buckets that
        can be filled. And don't mistake a textual value attached to a
        </span><code class="literal" xml:space="preserve" id="code_000035" smilref="What_Is_HTML5_00001.smil#code_000035">div</code><span class="text" id="span_000074" smilref="What_Is_HTML5_00001.smil#span_000074">'s </span><code class="literal" xml:space="preserve" id="code_000036" smilref="What_Is_HTML5_00001.smil#code_000036">id</code><span class="text" id="span_000075" smilref="What_Is_HTML5_00001.smil#span_000075"> attribute as semantic meaning.
        That's no different than the </span><code class="literal" xml:space="preserve" id="code_000037" smilref="What_Is_HTML5_00001.smil#code_000037">object</code><span class="text" id="span_000076" smilref="What_Is_HTML5_00001.smil#span_000076"> element when used to display
        audio or video; you've got to parse and tokenize to get any real sense of meaning.
        That's meaning, but it's not meaning encoded into the HTML in a particularly
        useful way.</span></p><p xml:space="preserve" id="p_000047" smilref="What_Is_HTML5_00001.smil#p_000047"><span class="text" id="span_000077" smilref="What_Is_HTML5_00001.smil#span_000077">This is another area that HTML5 seeks to improve. For many, the introduction of another
        few elements -- </span><code class="literal" xml:space="preserve" id="code_000038" smilref="What_Is_HTML5_00001.smil#code_000038">nav</code><span class="text" id="span_000078" smilref="What_Is_HTML5_00001.smil#span_000078"> and </span><code class="literal" xml:space="preserve" id="code_000039" smilref="What_Is_HTML5_00001.smil#code_000039">header</code><span class="text" id="span_000079" smilref="What_Is_HTML5_00001.smil#span_000079"> and
          </span><code class="literal" xml:space="preserve" id="code_000040" smilref="What_Is_HTML5_00001.smil#code_000040">footer</code><span class="text" id="span_000080" smilref="What_Is_HTML5_00001.smil#span_000080">, for example -- have been largely ignored. Why not just
        keep using </span><code class="literal" xml:space="preserve" id="code_000041" smilref="What_Is_HTML5_00001.smil#code_000041">&lt;div id="nav"&gt;</code><span class="text" id="span_000081" smilref="What_Is_HTML5_00001.smil#span_000081">? Well, now the answer should be obvious:
        these new elements provide additional semantic meaning. If I'm linking to your page,
        or even pulling in part of your page, in my own page, I can grab (or not grab) your footer,
        your navigation, your figures and figure captions.</span></p><p xml:space="preserve" id="p_000048" smilref="What_Is_HTML5_00001.smil#p_000048"><span class="text" id="span_000082" smilref="What_Is_HTML5_00001.smil#span_000082">Don't let the </span><a class="ulink" href="http://en.wikipedia.org/wiki/Standard_Generalized_Markup_Language" xml:space="preserve" external="true" id="a_000019" smilref="What_Is_HTML5_00001.smil#a_000019">SGML</a><span class="text" id="span_000083" smilref="What_Is_HTML5_00001.smil#span_000083">-ness
        of semantic meaning escape you. (Yes, I realize that SGML-ness isn't a word, but it
        should be.) When you really begin to connect heterogeneous parts of the web together,
        semantic meaning becomes huge. So does a page that is more than a bunch of
          </span><code class="literal" xml:space="preserve" id="code_000042" smilref="What_Is_HTML5_00001.smil#code_000042">div</code><span class="text" id="span_000084" smilref="What_Is_HTML5_00001.smil#span_000084">s with </span><code class="literal" xml:space="preserve" id="code_000043" smilref="What_Is_HTML5_00001.smil#code_000043">id</code><span class="text" id="span_000085" smilref="What_Is_HTML5_00001.smil#span_000085"> attributes. You'll want to know
        what you're getting, and an HTML standard is a heck of a lot better way to determine
        meaning than arbitrary text values tucked away into </span><code class="literal" xml:space="preserve" id="code_000044" smilref="What_Is_HTML5_00001.smil#code_000044">id</code><span class="text" id="span_000086" smilref="What_Is_HTML5_00001.smil#span_000086"> attributes.</span></p><p xml:space="preserve" id="p_000049" smilref="What_Is_HTML5_00001.smil#p_000049"><span class="text" id="span_000087" smilref="What_Is_HTML5_00001.smil#span_000087">By now, you're either seeing a theme in what I'm calling out about HTML5, or
        you're seeing little more than a grab bag of loosely connected features. If
        you're in the latter camp, let me make it explicit: HTML5, when used both as the 21st
        century web suggests and as the original HTML specification allowed, is best at
        interconnecting things. If you view your pages as a collection of content, and let go of the
        rather egotistical idea that all that content has to </span><span class="emphasis" xml:space="preserve" id="span_000088" smilref="What_Is_HTML5_00001.smil#span_000088"><em xml:space="preserve" id="em_000005">be</em></span><span class="text" id="span_000089" smilref="What_Is_HTML5_00001.smil#span_000089"> your own, then
        all of the new features of HTML5 discussed so far are hugely important. You can pull in
        audio and video and manipulate that audio and video as if it were your own. You can organize
        your page semantically and link to and even pull in content from other sites, using the
        semantics of that page. You can separate content from organization using more than just
          </span><code class="literal" xml:space="preserve" id="code_000045" smilref="What_Is_HTML5_00001.smil#code_000045">div</code><span class="text" id="span_000090" smilref="What_Is_HTML5_00001.smil#span_000090">s, but actual first-order elements for navigation and headers and
        footers.</span></p><p xml:space="preserve" id="p_000050" smilref="What_Is_HTML5_00001.smil#p_000050"><span class="text" id="span_000091" smilref="What_Is_HTML5_00001.smil#span_000091">And then, when things were going so well, there was </span><code class="literal" xml:space="preserve" id="code_000046" smilref="What_Is_HTML5_00001.smil#code_000046">canvas</code><span class="text" id="span_000092" smilref="What_Is_HTML5_00001.smil#span_000092">.</span></p></level1><level1 class="sect1" title="The canvas element is a programmable div" xml:space="preserve" id="ch01s06"><h1 class="title" xml:space="preserve" id="ch01s06-canvas_element_is_a_programmable_div" smilref="What_Is_HTML5_00001.smil#ch01s06-canvas_element_is_a_programmable_div">The canvas element is a programmable div</h1><p xml:space="preserve" id="p_000051" smilref="What_Is_HTML5_00001.smil#p_000051"><span class="text" id="span_000093" smilref="What_Is_HTML5_00001.smil#span_000093">It's odd that the element that is probably at the top of the HTML5 spec in terms
        of "wow factor" is in fact the element that brings in the ability to undo most
        of the good I think HTML5 does. That element, of course, is </span><code class="literal" xml:space="preserve" id="code_000047" smilref="What_Is_HTML5_00001.smil#code_000047">canvas</code><span class="text" id="span_000094" smilref="What_Is_HTML5_00001.smil#span_000094">.
          </span><code class="literal" xml:space="preserve" id="code_000048" smilref="What_Is_HTML5_00001.smil#code_000048">canvas</code><span class="text" id="span_000095" smilref="What_Is_HTML5_00001.smil#span_000095"> defines, well, a canvas on the HTML page. Using JavaScript, you
        can draw on that canvas using methods that look a lot like a graphics scripting language.
        JavaScript basically grabs the </span><code class="literal" xml:space="preserve" id="code_000049" smilref="What_Is_HTML5_00001.smil#code_000049">canvas</code><span class="text" id="span_000096" smilref="What_Is_HTML5_00001.smil#span_000096"> by its </span><code class="literal" xml:space="preserve" id="code_000050" smilref="What_Is_HTML5_00001.smil#code_000050">id</code><span class="text" id="span_000097" smilref="What_Is_HTML5_00001.smil#span_000097">
        attribute, using </span><code class="literal" xml:space="preserve" id="code_000051" smilref="What_Is_HTML5_00001.smil#code_000051">document.getElementById()</code><span class="text" id="span_000098" smilref="What_Is_HTML5_00001.smil#span_000098">, and then gets a
          </span><span class="emphasis" xml:space="preserve" id="span_000099" smilref="What_Is_HTML5_00001.smil#span_000099"><em xml:space="preserve" id="em_000006">context</em></span><span class="text" id="span_000100" smilref="What_Is_HTML5_00001.smil#span_000100">. Most of the examples online that are really jaw-dropping use
        the 3D canvas, but there's a 2D canvas that's a lot better entry-point if
        you're new to this sort of thing.</span></p><p xml:space="preserve" id="p_000052" smilref="What_Is_HTML5_00001.smil#p_000052"><span class="text" id="span_000101" smilref="What_Is_HTML5_00001.smil#span_000101">Once you've got a context, you can operate upon that object, using properties like
          </span><code class="literal" xml:space="preserve" id="code_000052" smilref="What_Is_HTML5_00001.smil#code_000052">fillStyle</code><span class="text" id="span_000102" smilref="What_Is_HTML5_00001.smil#span_000102">, and methods like </span><code class="literal" xml:space="preserve" id="code_000053" smilref="What_Is_HTML5_00001.smil#code_000053">fillRect(top, left, width,
          height);</code><span class="text" id="span_000103" smilref="What_Is_HTML5_00001.smil#span_000103">, and </span><code class="literal" xml:space="preserve" id="code_000054" smilref="What_Is_HTML5_00001.smil#code_000054">canvas</code><span class="text" id="span_000104" smilref="What_Is_HTML5_00001.smil#span_000104">. Yes, it's really that simple, and
        even pretty intuitive. In fact, more than anything else, drawing on a canvas for the first
        time with JavaScript felt a lot like my old Logo days in grade school, or even Java AWT days
        in early Java. (Oddly, I'm prouder of what I did in Logo than AWT; don't
        judge.)</span></p><p xml:space="preserve" id="p_000053" smilref="What_Is_HTML5_00001.smil#p_000053"><span class="text" id="span_000105" smilref="What_Is_HTML5_00001.smil#span_000105">I don't think it's worth a lot of ink to walk you through using canvases.
        There are tons of web tutorials out there in both 2D and 3D, and a slew of </span><a class="ulink" href="http://oreilly.com/catalog/0636920016502" xml:space="preserve" external="true" id="a_000020" smilref="What_Is_HTML5_00001.smil#a_000020">good video</a><span class="text" id="span_000106" smilref="What_Is_HTML5_00001.smil#span_000106"> and </span><a class="ulink" href="http://oreilly.com/catalog/9780596806033/" xml:space="preserve" external="true" id="a_000021" smilref="What_Is_HTML5_00001.smil#a_000021">publications</a><span class="text" id="span_000107" smilref="What_Is_HTML5_00001.smil#span_000107">. Suffice it to say
        that the days of needing Flash to really do anything visually interesting, or at least
        needing to take that visually-interesting thing you created and turn it into an image or a
        video, are gone. What's even cooler is that you again get JavaScript integration into
        your page. So now a keypress or a form submission, or dragging an element on the page, or
        the playing of a video (because we have </span><code class="literal" xml:space="preserve" id="code_000055" smilref="What_Is_HTML5_00001.smil#code_000055">draggable</code><span class="text" id="span_000108" smilref="What_Is_HTML5_00001.smil#span_000108"> and
          </span><code class="literal" xml:space="preserve" id="code_000056" smilref="What_Is_HTML5_00001.smil#code_000056">video</code><span class="text" id="span_000109" smilref="What_Is_HTML5_00001.smil#span_000109"> now, remember?) can interact with the canvases on your
        page.</span></p><p xml:space="preserve" id="p_000054" smilref="What_Is_HTML5_00001.smil#p_000054">Now, there are two caveats: one small one and one giant one. The small one is that browsers are still getting their HTML5 act together, and the 3D context in particular is pushing browsers beyond what they were often intended to do. So realize that while you're not going to get the dreaded "Flash content won't play" sort of message on your iPhone, there is going to be a lot of rigorous testing required to get your 3D drawing just right on the most computers in the most browsers. But, honestly, that's a testing issue, and one that both time (as people upgrade) and testing can overcome.</p><p xml:space="preserve" id="p_000055" smilref="What_Is_HTML5_00001.smil#p_000055"><span class="text" id="span_000110" smilref="What_Is_HTML5_00001.smil#span_000110">The more serious issue is that the </span><code class="literal" xml:space="preserve" id="code_000057" smilref="What_Is_HTML5_00001.smil#code_000057">canvas</code><span class="text" id="span_000111" smilref="What_Is_HTML5_00001.smil#span_000111"> becomes much like an
        anonymous, programmatically-filled </span><code class="literal" xml:space="preserve" id="code_000058" smilref="What_Is_HTML5_00001.smil#code_000058">div</code><span class="text" id="span_000112" smilref="What_Is_HTML5_00001.smil#span_000112">. The things within it have no
        semantic meaning and existing apart from the HTML's encoding on disk; it's a
        dynamic set of programmatically-created lines and squares and spheres. No matter how cool of
        a texture you wrap around a 3D model, you can't go in with a separate JavaScript
        function (or better, a separate HTML page) and grab that textured sphere, link to it, spin
        it around its axis, or adjust the light source. You can do </span><span class="emphasis" xml:space="preserve" id="span_000113" smilref="What_Is_HTML5_00001.smil#span_000113"><em xml:space="preserve" id="em_000007">all</em></span><span class="text" id="span_000114" smilref="What_Is_HTML5_00001.smil#span_000114"> of those
        things from the page itself, mind you; you just can't do it in the
        loosely-interconnected manner that is heralding the new and cool web that HTML5 helps
        drive.</span></p><p xml:space="preserve" id="p_000056" smilref="What_Is_HTML5_00001.smil#p_000056"><span class="text" id="span_000115" smilref="What_Is_HTML5_00001.smil#span_000115">So is this a stump speech against </span><code class="literal" xml:space="preserve" id="code_000059" smilref="What_Is_HTML5_00001.smil#code_000059">canvas</code><span class="text" id="span_000116" smilref="What_Is_HTML5_00001.smil#span_000116">? Of course not. I'd no
        more avoid </span><code class="literal" xml:space="preserve" id="code_000060" smilref="What_Is_HTML5_00001.smil#code_000060">canvas</code><span class="text" id="span_000117" smilref="What_Is_HTML5_00001.smil#span_000117"> than I'd tell someone in HTML4 to avoid
          </span><code class="literal" xml:space="preserve" id="code_000061" smilref="What_Is_HTML5_00001.smil#code_000061">div</code><span class="text" id="span_000118" smilref="What_Is_HTML5_00001.smil#span_000118">. Yes, there is a limit to semantic meaning. Yes, the
          </span><code class="literal" xml:space="preserve" id="code_000062" smilref="What_Is_HTML5_00001.smil#code_000062">canvas</code><span class="text" id="span_000119" smilref="What_Is_HTML5_00001.smil#span_000119"> becomes a big blob that contains something, but that something
        has minimal outside visibility. But it's still a step forward, and heralds what is
        hopefully a wealth of GPU studs and studettes making HTML5 do far more than anyone thought
        possible. (Studettes: another made up word, but these are </span><span class="emphasis" xml:space="preserve" id="span_000120" smilref="What_Is_HTML5_00001.smil#span_000120"><em xml:space="preserve" id="em_000008">good</em></span><span class="text" id="span_000121" smilref="What_Is_HTML5_00001.smil#span_000121"> words.
        Webster, anyone? Urban Dictionary?)</span></p><p xml:space="preserve" id="p_000057" smilref="What_Is_HTML5_00001.smil#p_000057"><span class="text" id="span_000122" smilref="What_Is_HTML5_00001.smil#span_000122">Hopefully, there will soon be standardized ways to call into objects that are created
        within a canvas, and granularity becomes part of the advantages of a
          </span><code class="literal" xml:space="preserve" id="code_000063" smilref="What_Is_HTML5_00001.smil#code_000063">canvas</code><span class="text" id="span_000123" smilref="What_Is_HTML5_00001.smil#span_000123"> rather than a drawback. Until then, you've got to decide
        if using a </span><code class="literal" xml:space="preserve" id="code_000064" smilref="What_Is_HTML5_00001.smil#code_000064">canvas</code><span class="text" id="span_000124" smilref="What_Is_HTML5_00001.smil#span_000124"> makes sense. In general, if you're doing
        something page-specific, or if your </span><code class="literal" xml:space="preserve" id="code_000065" smilref="What_Is_HTML5_00001.smil#code_000065">canvas</code><span class="text" id="span_000125" smilref="What_Is_HTML5_00001.smil#span_000125"> is itself a self-contained
        "mini-application," then go forth and prosper. If your </span><code class="literal" xml:space="preserve" id="code_000066" smilref="What_Is_HTML5_00001.smil#code_000066">canvas</code><span class="text" id="span_000126" smilref="What_Is_HTML5_00001.smil#span_000126">
        is tightly integrated into the rest of your page, you're probably in great shape, too.
        But if you want a lot of other pages and sites to pick up your </span><code class="literal" xml:space="preserve" id="code_000067" smilref="What_Is_HTML5_00001.smil#code_000067">canvas</code><span class="text" id="span_000127" smilref="What_Is_HTML5_00001.smil#span_000127"> as
        any sort of component, you're probably out of luck, and might want to look at a
        different approach.</span></p><p xml:space="preserve" id="p_000058" smilref="What_Is_HTML5_00001.smil#p_000058"><span class="text" id="span_000128">The good/bad news here is of course, that HTML allows for this sort of reuse, and people are starting to figure that out, but people are </span><span class="emphasis" xml:space="preserve" id="span_000129"><em xml:space="preserve" id="em_000009">just</em></span><span class="text" id="span_000130"> starting to figure this out. Interconnections again; are you building your own little kingdom in the web, complete with moat and drawbridge to keep everyone else out? Or are you integrating everything you do into a larger-than-you Internet that shares (and sometimes steals) as much as it creates, and in that sharing and stealing recreates?</span></p></level1><level1 class="sect1" title="Mobile: Killer application, ho-hum client" xml:space="preserve" id="ch01s07"><h1 class="title" xml:space="preserve" id="ch01s07-mobilecolon_killer_applicationcomma_ho-h" smilref="What_Is_HTML5_00001.smil#ch01s07-mobilecolon_killer_applicationcomma_ho-h">Mobile: Killer application, ho-hum client</h1><p xml:space="preserve" id="p_000059" smilref="What_Is_HTML5_00001.smil#p_000059"><span class="text" id="span_000131" smilref="What_Is_HTML5_00001.smil#span_000131">For those of you already read up on HTML5, you may be surprised how little the word
        "mobile" has shown up. Sure, I mentioned earlier that mobile devices can view
        HTML5 web pages, and consume audio and video from </span><code class="literal" xml:space="preserve" id="code_000068" smilref="What_Is_HTML5_00001.smil#code_000068">audio</code><span class="text" id="span_000132" smilref="What_Is_HTML5_00001.smil#span_000132"> and
          </span><code class="literal" xml:space="preserve" id="code_000069" smilref="What_Is_HTML5_00001.smil#code_000069">video</code><span class="text" id="span_000133" smilref="What_Is_HTML5_00001.smil#span_000133"> without many problems. But isn't this the big story with
        HTML5? In fact, isn't it mobile devices, more than anything else, that are driving
        HTML5 adoption?</span></p><p xml:space="preserve" id="p_000060" smilref="What_Is_HTML5_00001.smil#p_000060">Well, yes and no.</p><p xml:space="preserve" id="p_000061" smilref="What_Is_HTML5_00001.smil#p_000061">As far as mobile devices driving adoption, absolutely: HTML5 owes a lot of its buzz to mobile devices, and in particular Steve Jobs and his near-militant campaign against Flash. The iPhone came with Safari, Safari had HTML5 support, so suddenly iPhone users were giddy and talkative. Now almost all modern smartphones have an HTML5-capable browser. So while the ability to view video without Flash is big, the yet-bigger story is simply that anything that works on an HTML5 website as viewed within a desktop browser pretty much works on a phone. So yes, HTML5 wouldn't be the talk of the developer town if not for mobile.</p><p xml:space="preserve" id="p_000062" smilref="What_Is_HTML5_00001.smil#p_000062"><span class="text" id="span_000134" smilref="What_Is_HTML5_00001.smil#span_000134">But no, mobile can't be the big story with HTML5. (People will claim it is, and do
        so all the time, but they're misguided in that they're calling an effect a
        cause.) HTML5 doesn't offer all sorts of bells and whistles for working with mobile
        devices. Yes, there are ways to detect the orientation and screen size of a mobile device;
        but those also allow for detection of the size of a browser window, or a tablet display. And
        yes, certainly, the </span><code class="literal" xml:space="preserve" id="code_000070" smilref="What_Is_HTML5_00001.smil#code_000070">canvas</code><span class="text" id="span_000135" smilref="What_Is_HTML5_00001.smil#span_000135"> element and new audio and video features make
        it possible to deliver amazing content to a mobile device. And yes, yet again, more and more
        folks are building mobile-optimized websites for phones. So how is this not a big
        deal?</span></p><p xml:space="preserve" id="p_000063" smilref="What_Is_HTML5_00001.smil#p_000063"><span class="text" id="span_000136">Well, what's important is not that HTML5 works on phones. What's important is that HTML5 "just works." There aren't tons of issues when getting your site to work on a phone ... and </span><span class="emphasis" xml:space="preserve" id="span_000137"><em xml:space="preserve" id="em_000010">that's</em></span><span class="text" id="span_000138"> the story. The big deal isn't that you can do all kinds of cool things with your website for mobile phones. The big deal is that you can do all kinds of cool things, period; and that those cool things just happen to work on mobile phones ... and tablets ... and netbooks ... and desktop clients. HTML5 really removes the need to think about mobile devices separately from other devices.</span></p><p xml:space="preserve" id="p_000064" smilref="What_Is_HTML5_00001.smil#p_000064">(Note: I'm not saying you should ignore mobile devices, or not think about them separately. The best sites I use on my phone are almost all at least mobile-optimized, if not complete with a pure-mobile theme or CSS styling. That said, you don't have to do this to get up and running. Also, almost all good mobile-themed sites have a "View normal site" that works perfectly well. That says a lot. It used to be you'd want to hide the normal site at almost all costs. Not with HTML5...)</p></level1><level1 class="sect1" title="... and a partridge and a pear tree" xml:space="preserve" id="ch01s08"><h1 class="title" xml:space="preserve" id="ch01s08-dotdotdot_and_a_partridge_and_a_pear_tre" smilref="What_Is_HTML5_00001.smil#ch01s08-dotdotdot_and_a_partridge_and_a_pear_tre">... and a partridge and a pear tree</h1><p xml:space="preserve" id="p_000065" smilref="What_Is_HTML5_00001.smil#p_000065"><span class="text" id="span_000139">As this article turns the bend from readable to monolithic, at least in article terms, it's easy to look at what else HTML5 offers, and consider writing an entire book. There's web messaging, and offline applications, and local storage ... really, everything you need to write an entire application. And ultimately, that's the brief but accurate assessment I'd make of the "everything else" of HTML5. HTML5 is no longer about a single page, or even a collection of inter-linked pages. It's about interconnection -- and I've tried to beat that drum consistently above all else -- but that interconnectedness is about a lot more than pages. It's certainly about a lot more than just </span><span class="emphasis" xml:space="preserve" id="span_000140"><em xml:space="preserve" id="em_000011">your</em></span><span class="text" id="span_000141"> pages.</span></p><p xml:space="preserve" id="p_000066" smilref="What_Is_HTML5_00001.smil#p_000066">Web messaging allows interconnecting HTML5 applications (I'll defend the use of "application" here in a moment; for now, just go with me). Those applications don't have to be in the same domain; for the first time, there's an intelligent JavaScript-based messaging framework that allows for communication across domains. You can write listeners to receive messages and senders to send them. In its simplest form, all the limitations of Ajax sandboxing that everyone griped about have been removed, albeit with some security considerations and a lot more complex API than the pretty simple XmlHttpRequest object. But all the same, if you buy into the premise that HTML5 encourages sharing of resources across the web, then messaging makes that sharing more of a true two-way communication. Now you can build resources that can be consumed, even if that consumption involves receiving data as well as sending it.</p><p xml:space="preserve" id="p_000067" smilref="What_Is_HTML5_00001.smil#p_000067">And you've got local storage, too: a legitimate database-like storage mechanism for holding onto data and delivering it to a server on the Internet when that server is available -- even if that's not the "now" of the page's existence and use by a real person. These tie in closely with forms, the most obvious means of getting this sort of data that local storage is optimized to store. In fact, while it's nice that HTML5 forms offer some new controls and validation and the like, it's their ability to interact intelligently with offline storage (via, again, JavaScript) that's the really big story. Think about that: for the first time in, well, ever, there's valuable offline access that can take place. Again, there are kinks (and some of them are big) and some new wrinkles to take into your JavaScript, but the web has always had kinks and wrinkles. It's just that now you're getting more than ever for dealing with those issues.</p><p xml:space="preserve" id="p_000068" smilref="What_Is_HTML5_00001.smil#p_000068"><span class="text" id="span_000142" smilref="What_Is_HTML5_00001.smil#span_000142">Add to that even heavier-duty types of functionality, like </span><a class="ulink" href="http://www.whatwg.org/specs/web-workers/current-work/" xml:space="preserve" external="true" id="a_000022" smilref="What_Is_HTML5_00001.smil#a_000022">threads (which are called web workers, but really are just threads)</a><span class="text" id="span_000143" smilref="What_Is_HTML5_00001.smil#span_000143"> and </span><a class="ulink" href="http://dev.w3.org/html5/websockets/" xml:space="preserve" external="true" id="a_000023" smilref="What_Is_HTML5_00001.smil#a_000023">sockets</a><span class="text" id="span_000144" smilref="What_Is_HTML5_00001.smil#span_000144">. On the one hand, these aren't part of the core HTML5 spec. Instead, they've been moved into </span><a class="ulink" href="http://www.whatwg.org/" xml:space="preserve" external="true" id="a_000024" smilref="What_Is_HTML5_00001.smil#a_000024">WHATWG</a><span class="text" id="span_000145" smilref="What_Is_HTML5_00001.smil#span_000145">, so that says something about their ultimate inclusion and importance as part of HTML5 to the W3C community. On the other hand, by untying these from the core spec, they may now be free to evolve further and more quickly than ever before. In any case, it's no small thing to be talking about threads and sockets not as part of code that generates or produces HTML, but as part of an HTML application itself. These are serious tools, and further indicate that HTML5 is not to be taken as a language for building interesting and largely static web pages anymore.</span></p><p xml:space="preserve" id="p_000069" smilref="What_Is_HTML5_00001.smil#p_000069"><span class="text" id="span_000146" smilref="What_Is_HTML5_00001.smil#span_000146">So about this word </span><span class="emphasis" xml:space="preserve" id="span_000147" smilref="What_Is_HTML5_00001.smil#span_000147"><em xml:space="preserve" id="em_000012">application</em></span><span class="text" id="span_000148" smilref="What_Is_HTML5_00001.smil#span_000148">: isn't that what's ultimately being created with HTML5? This isn't just about neat visuals and clever drag-and-drop controls and even replacing Flash-based sites. HTML5 pushes a good programmer to create semantically-meaningful and accessible resources. Those resources don't have to be entire pages. They can just be "things:" video and audio and navigation and footers. Those "things" can not only be used across domains by other "things," but there's actually communication that can happen. You can pull in a very well-designed footer by sending it a few choice bits of information, and have that footer pulled from one domain interact with a video pulled from another domain. When the user is offline, big deal. Local storage not only allows for database-like storage of an HTML page </span><span class="emphasis" xml:space="preserve" id="span_000149" smilref="What_Is_HTML5_00001.smil#span_000149"><em xml:space="preserve" id="em_000013">without an installed database</em></span><span class="text" id="span_000150" smilref="What_Is_HTML5_00001.smil#span_000150">, but is even kind enough to make sure that data gets to the right place where connectivity is restored. JavaScript is not a toy language anymore, and </span><a class="ulink" href="http://jquery.com/" xml:space="preserve" external="true" id="a_000025" smilref="What_Is_HTML5_00001.smil#a_000025">jQuery</a><span class="text" id="span_000151" smilref="What_Is_HTML5_00001.smil#span_000151"> makes what was annoying in JavaScript lexically a piece of cake.</span></p><p xml:space="preserve" id="p_000070" smilref="What_Is_HTML5_00001.smil#p_000070">These are applications.</p><p xml:space="preserve" id="p_000071" smilref="What_Is_HTML5_00001.smil#p_000071">Stop building web pages. Please. Stop trying to only use "your" content. Slap a Creative Commons license not just on your video, or your images, but on your HTML, and then build interesting components and assume they'll be sucked into other things and used in ways you'd never considered. It is called the Internet, remember?</p><p xml:space="preserve" id="p_000072" smilref="What_Is_HTML5_00001.smil#p_000072">The winners in an HTML5 world are those who stop fearing being stolen from, and actually start handing out their candy to every kid on the block. It's about a lot more than YouTube-like sharing of videos. Applications are increasingly becoming a collection of mini-applications, and if you're thinking about your HTML5 work as collecting resources -- some original, some shared -- then you're way ahead of the curve.</p><p xml:space="preserve" id="p_000073" smilref="What_Is_HTML5_00001.smil#p_000073"><span class="strong" xml:space="preserve" id="span_000152"><strong xml:space="preserve" id="strong_000004">Related:</strong></span></p><div class="itemizedlist" xml:space="preserve" id="div_000003"><list class="itemizedlist" xml:space="preserve" type="ul" id="list_000003"><li class="listitem" xml:space="preserve" id="li_000012"><p xml:space="preserve" id="p_000074" smilref="What_Is_HTML5_00001.smil#p_000074"><a class="ulink" href="http://radar.oreilly.com/2011/02/flash-html5-developers.html" xml:space="preserve" external="true" id="a_000026" smilref="What_Is_HTML5_00001.smil#a_000026">Can Flash and HTML5 get along?</a></p></li><li class="listitem" xml:space="preserve" id="li_000013"><p xml:space="preserve" id="p_000075" smilref="What_Is_HTML5_00001.smil#p_000075"><a class="ulink" href="http://radar.oreilly.com/2011/02/flash-html5-developers.html" xml:space="preserve" external="true" id="a_000027" smilref="What_Is_HTML5_00001.smil#a_000027">Why HTML5 is worth your time</a></p></li><li class="listitem" xml:space="preserve" id="li_000014"><p xml:space="preserve" id="p_000076" smilref="What_Is_HTML5_00001.smil#p_000076"><a class="ulink" href="http://radar.oreilly.com/2010/11/new-directions-in-web-architec.html" xml:space="preserve" external="true" id="a_000028" smilref="What_Is_HTML5_00001.smil#a_000028">New directions in web architecture. Again.</a></p></li><li class="listitem" xml:space="preserve" id="li_000015"><p xml:space="preserve" id="p_000077" smilref="What_Is_HTML5_00001.smil#p_000077"><a class="ulink" href="http://radar.oreilly.com/2010/11/semantic-web-linked-data.html" xml:space="preserve" external="true" id="a_000029" smilref="What_Is_HTML5_00001.smil#a_000029">Where the semantic web stumbled, linked data will succeed</a></p></li></list></div></level1><level1 class="colophon" title="About the Author" xml:space="preserve" id="author_bios"><h1 class="title" xml:space="preserve" id="author_bios-id2396549" smilref="What_Is_HTML5_00001.smil#author_bios-id2396549">About the Author</h1><p xml:space="preserve" id="p_000078" smilref="What_Is_HTML5_00001.smil#p_000078">Brett McLaughlin has become one of the most well-known authors and programmers in the Java and XML communities. He's worked for Nextel Communications, implementing complex enterprise systems, at Lutris Technologies, actually writing application servers, and most recently at O'Reilly Media, Inc., where he continues to write and edit books that matter. His most recent book, "Java 5.0 Tiger: A Developer's Notebook", was the first book available on the newest version of Java, and his classic Java and XML remains one of the definitive works on using XML technologies in Java.</p></level1></bodymatter>
    
  </book>
</dtbook>
